1.Введення до Dart та його осболивості
        1.1 Що таке Dart?
Dart — це мова програмування, розроблена співробітниками компанії Google Ларсом Баком і Каспером Лундом з метою створення універсального, оптимізованого мови, здатної підтримувати розробку програм та додатків для різних пристроїв і платформ. Dart було представлено в 2011 році, перша стабільна версія вийшла в 2013 році, а друга — вже в 2019 році. Основна ідея її створення полягала у заміні популярної мови JavaScript, усунувши її ключові недоліки. Dart є високорівневою мовою, що працює з абстрактними поняттями, зрозумілими людині, але далекими від деталей апаратного рівня. Завдяки цьому код на Dart є лаконічним, зрозумілим та легким для освоєння, навіть для новачків. Для розробників із досвідом роботи з іншими мовами перехід на Dart відбувається ще швидше.
Ця мова орієнтована на фронтенд-розробку, включаючи створення інтерфейсів користувача та взаємодію з браузером. Водночас її платформа Dart VM може замінити Node.js для написання серверного коду. Dart є відкритим та безкоштовним інструментом, що робить його доступним для широкого кола розробників. Додатково, активна підтримка Google забезпечує постійний розвиток та актуальність мови.
________________


1.2 Для чого використовується Dart
Основною метою створення Dart було надання альтернативи JavaScript, тому ця мова насамперед орієнтована на веброзробку. Dart пропонує безліч вбудованих інструментів для роботи з браузерами, створення вебсторінок та розробки інтерфейсів. Завдяки своїй багатофункціональності Dart також підходить для серверного програмування, але основна його популярність зосереджена у мобільній розробці.
Мова Dart тісно пов’язана з Flutter — популярним фреймворком для створення мобільних додатків під iOS та Android. Саме через Flutter Dart здобув значне поширення у сфері мобільної розробки. Водночас у сегменті веброзробки він поки не є настільки популярним, особливо в Україні. Однак його використання активно зростає завдяки простоті синтаксису та зручним інструментам.
Крім цього, Dart знайшов застосування у фронтенд-розробці завдяки SASS — надбудові для CSS, яка полегшує створення верстки. Це робить мову особливо привабливою для тих, хто працює з інтерфейсами користувача.
________________


1.3 Особливості Dart
1. Орієнтованість на створення інтерфейсів. Dart розроблявся спеціально для створення інтерфейсів, що є однією з його сильних сторін. Це проявляється у мобільній розробці за допомогою Flutter, а також у зручності роботи з розміткою. Мова дозволяє зменшити кількість перемикань між HTML, CSS та кодом, що економить час розробника. Наприклад, під час компіляції у JavaScript автоматично генерується шаблонна HTML-сторінка, яку можна негайно відкрити у браузері для перегляду.
2. Наслідок C та C++. Dart використовує синтаксис, подібний до C, що робить його зрозумілим для розробників із досвідом роботи з C-подібними мовами. Dart успадкував ключові концепції, зокрема використання функції main() як основного блоку програми. Водночас він набагато простіший в освоєнні завдяки сучасним особливостям та орієнтації на різноманітні завдання.
3. Факультативна типізація. Типізація у мовах програмування буває статичною та динамічною. У першому випадку розробник повинен сам вказувати, до якого типу відноситиметься змінна: число, рядок, масив або ще щось. У другому випадку мова вирішує це сама на підставі того, які дані записав у змінну розробник.
4. Компіляція. Dart має перевагу у вигляді компіляції у машинний код, що забезпечує високу швидкість виконання програм. На відміну від JavaScript, який інтерпретується, Dart пропонує швидшу та ефективнішу роботу завдяки компіляції.
5. Два види компіляції:
   * AOT (Ahead of Time, «на випередження»): програма повністю компілюється у машинний код перед запуском. Це забезпечує швидкий старт і стабільну роботу програми.
   * JIT (Just in Time, «точно вчасно»): код компілюється безпосередньо під час виконання. Цей підхід прискорює розробку, адже розробнику не потрібно повторно компілювати весь код після кожної зміни.
6. Dart використовує обидва методи: JIT під час розробки для зручності, а AOT для остаточного продукту, що оптимізує продуктивність.
7. Класичне ООП. Dart підтримує об'єктно-орієнтоване програмування, включаючи класи (в тому числі абстрактні), наслідування, поліморфізм та інші стандартні елементи. Це спрощує створення масштабованих і організованих додатків.
8. Ізолятори. Dart є однопоточною мовою, але для виконання паралельних завдань використовується механізм ізоляторів (isolate). Ізолятори — це незалежні віртуальні потоки, кожен із яких має власну область пам'яті. Вони обмінюються даними через черги, що забезпечує багатозадачність.
9. Гаряче перезавантаження. У Dart передбачено гаряче перезавантаження (hot reload), яке дозволяє вносити зміни у код без перезапуску програми. Це значно прискорює процес розробки, оскільки розробники можуть миттєво бачити результати своїх змін.
10. Сумісність із багатьма платформами. Dart дозволяє створювати додатки для різних платформ, включаючи веб, мобільні пристрої та сервери. Це робить його універсальним інструментом для розробників, які працюють у різних напрямках.
2. Основні принципи оформлення коду в Dart
Оформлення коду в Dart є важливою складовою процесу розробки. Це забезпечує читабельність, підтримуваність проекту та мінімізує ризики появи помилок. У цій доповіді розглядаються ключові аспекти стандартів та рекомендацій для оформлення коду в Dart, які полегшують роботу як індивідуальних розробників, так і команд.
________________


2.1. Форматування коду
– Відступи
Відступи мають вирішальне значення для зрозумілості структури коду. У Dart стандартом є використання 2 пробілів замість табуляції, щоб уникнути некоректного відображення в різних середовищах.
– Довжина рядка
Обмеження довжини рядка до 80 символів робить код компактним і зручним для читання. Довгі рядки розбивають на логічні частини:
Рекомендація: Використовуйте рекомендовану довжину рядків. Опис: Розбиття довгих рядків робить код зручнішим для читання та підтримки.
– Вирівнювання блоків
Забезпечте однакове вирівнювання блоків коду, щоб покращити його структурованість і уникнути плутанини.
Рекомендація: Завжди вирівнюйте блоки коду один до одного. Опис: Послідовне вирівнювання покращує загальну структуру програми.


– Пробіли
* Завжди додавайте пробіли навколо операторів:
var sum = a + b;
* Уникайте зайвих пробілів наприкінці рядків.
________________


2.2. Назви змінних та методів
Правильний вибір імен спрощує розуміння коду іншими розробниками. Імена мають відображати суть змінної або функції.
– Стилі написання
lowerCamelCase для змінних та методів
UpperCamelCase для класів та енумів

– Використання осмислених назв
Імена змінних і методів повинні бути інформативними та відображати їхнє призначення.
Рекомендація: Використовуйте осмислені назви змінних та функцій. Опис: Правильне іменування допомагає іншим розробникам легко зрозуміти призначення коду. Уникайте використання абревіатур і коротких імен без значення.


________________


2. 3. Коментарі
– Однорядкові коментарі
Використовуються для пояснення логіки окремих рядків:
Опис: Короткі пояснення допомагають зрозуміти код без потреби детального аналізу.
Рекомендація: Завжди додавайте коментарі для важливих рядків коду.


–Багаторядкові коментарі

Опис: Використовуються для пояснення складних частин коду, написання великих блоків тексту, документування функцій, класів або файлів. Допомагають краще зрозуміти логіку програмного забезпечення, особливо в командних проєктах.
Рекомендація: Використовуйте багаторядкові коментарі для опису алгоритмів, ключових рішень або важливих деталей, які складно передати коротко.
– Документування коду
________________


2.4. Використання фігурних дужок
Фігурні дужки {} використовуються навіть для однорядкових блоків:
________________
3. Структура файлів у Dart
3.1 Порядок елементів
Дотримуйтесь структури:
Імпорти:
import 'dart:math';
import 'package:flutter/material.dart';
   1. import 'local_module.dart';
   2. Константи та глобальні змінні.
   3. Класи.
   4. Функція main().
________________


3.2 Розподіл функціональності
Кожен файл повинен містити одну логічну одиницю, наприклад, клас або набір функцій, що виконують одну задачу.


4. Основні методи рефакторингу
Рефакторинг — це процес поліпшення структури коду без зміни його функціональності. У Dart, як і в будь-якій іншій мові програмування, рефакторинг важливий для покращення підтримуваності, читабельності та масштабованості коду. Ось кілька принципів рефакторингу, які допоможуть оптимізувати код і зробити його більш зрозумілим:
1. Простота коду
   * Зменшення складності: Завжди намагайтесь зменшити складність коду, роблячи його простішим для розуміння та підтримки. Якщо функція або метод виглядають надто складно, подумайте, як розділити їх на декілька менших, зручніших для сприйняття.
   * Принцип "Не повторюйся" (DRY): Якщо код повторюється в кількох місцях, варто винести його в окрему функцію або клас. Це зробить код більш гнучким і зменшить ймовірність помилок при внесенні змін.
Приклад до рефакторингу:
void printUserDetails(String name, int age) {
  print("Name: $name, Age: $age");
}


void printAdminDetails(String name, int age) {
  print("Admin Name: $name, Admin Age: $age");
}


Після рефакторингу:
void printUserDetails(String name, int age, {bool isAdmin = false}) {
  if (isAdmin) {
    print("Admin Name: $name, Admin Age: $age");
  } else {
    print("Name: $name, Age: $age");
  }
}


2. Читабельність
   * Осмислені імена змінних, функцій та класів: Імена повинні чітко описувати, що вони містять або виконують. Уникайте абревіатур та коротких імен без конкретного змісту. Імена мають бути самодокументуючимися.
Приклад до рефакторингу:
int a = 10;
int b = 5;
int c = a + b;


Після рефакторингу:
int length = 10;
int width = 5;
int area = length + width;


   * Простота структури: Розбивайте великі класи на дрібніші, коли це можливо. Це допоможе зробити код зручнішим для розуміння й подальшої роботи.
3. Функціональність та повторне використання
   * Уникайте дублювання коду: Якщо ви помітили, що схожий код повторюється в різних частинах програми, розгляньте можливість винесення цього коду в окрему функцію або клас. Це дозволяє зменшити кількість помилок і полегшує підтримку.
Приклад до рефакторингу:
int calculateSum(int a, int b) {
  return a + b;
}


int calculateProduct(int a, int b) {
  return a * b;
}


Після рефакторингу:
int calculate(int a, int b, String operation) {
  if (operation == 'sum') {
    return a + b;
  } else if (operation == 'product') {
    return a * b;
  }
  return 0;
}


4. Стандарти та правила оформлення коду
   * Дотримуйтесь єдиного стилю кодування, щоб полегшити співпрацю з іншими розробниками. Використовуйте стандартні правила форматування (наприклад, два пробіли для відступів, довжина рядка до 80 символів).
   * Автоматизація рефакторингу: Для цього можна використовувати інструменти типу dartfmt, які автоматично форматують код відповідно до стандартів Dart.
5. Використання типізації
   * Типізація для зручності та безпеки: Dart дозволяє використовувати як статичну, так і динамічну типізацію. Рекомендується використовувати статичну типізацію там, де це можливо, оскільки це підвищує безпеку коду і дозволяє виявити помилки на етапі компіляції.
Приклад до рефакторингу:
var a = "Hello";
var b = 10;


Після рефакторингу:
String a = "Hello";
int b = 10;


6. Ізоляція помилок
   * Коректне оброблення винятків: Переконайтесь, що всі потенційно небезпечні операції (наприклад, робота з файлом або мережею) оточені блоками try-catch. Це дозволяє обробляти помилки без падіння програми.
Приклад до рефакторингу:
try {
  var result = riskyFunction();
} catch (e) {
  // Порожній блок catch
}


Після рефакторингу:
try {
  var result = riskyFunction();
} catch (e) {
  print("Помилка: $e");
}


7. Модульність та розділення відповідальності
   * Розподіл функціональності: Кожен клас або функція повинна мати чітко визначену відповідальність. Це допомагає уникнути перенавантаження класів або методів зайвими завданнями.
Приклад до рефакторингу:
class User {
  String name;
  String email;


  void saveToDatabase() {
    // Збереження в базу даних
  }


  void sendEmail() {
    // Надсилання електронної пошти
  }
}


Після рефакторингу:
class User {
  String name;
  String email;
}


class DatabaseService {
  void saveUser(User user) {
    // Збереження в базу даних
  }
}


class EmailService {
  void sendWelcomeEmail(User user) {
    // Надсилання електронної пошти
  }
}
5. Висновки
Мова програмування Dart є потужним і гнучким інструментом, орієнтованим на веб- та мобільну розробку, з особливою увагою до створення інтерфейсів користувача. Завдяки своїм особливостям, таким як підтримка як статичної, так і динамічної типізації, двом методам компіляції (AOT і JIT), об'єктно-орієнтованому підходу та високій продуктивності, Dart є привабливим вибором для розробників, особливо у поєднанні з Flutter для мобільних додатків. Крім того, переваги Dart, як гаряче перезавантаження, підтримка ізоляторів для багатозадачності та сумісність з багатьма платформами роблять його ефективним у створенні крос-платформних рішень.
Правильне оформлення коду в Dart є важливою частиною процесу розробки, оскільки сприяє покращенню читабельності та підтримуваності коду, а також дозволяє знизити ризики появи помилок. Дотримання стандартів форматування, осмислені назви змінних та методів, правильне використання коментарів та ефективні практики рефакторингу допомагають підтримувати високий рівень якості коду.
Загалом, Dart є чудовим вибором для розробки сучасних додатків, зокрема у контексті мобільної розробки за допомогою Flutter, і надає розробникам потужні інструменти для створення ефективних, швидких і масштабованих програм.